{"version":3,"sources":["components/InstructionsPage.js","components/SelectSizePage.js","components/GamePage/Rows.js","components/GamePage/Columns.js","components/GamePage/GamePage.js","components/GamePage/Nav.js","components/GamePage/Popup.js","index.js"],"names":["InstructionsPage","props","react_default","a","createElement","id","className","onClick","global","setState","page","SizeItem","tableSize","index","concat","SelectSizePage","Object","toConsumableArray","Array","map","v","SelectSizePage_SizeItem","assign","key","Rows","column","Columns","GamePage_Rows","table","GamePage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Nav","setInitialTable","bind","assertThisInitialized","Popup","title","getScrore","isWin","isContinue","state","document","onkeyup","arrowKeysHandlers","_this2","getRandomPosition","Math","floor","random","line","slice","ArrowLeft","isReverse","isVertical","ArrowRight","ArrowUp","ArrowDown","evt","moveParams","getMoveParams","newTable","moveAllSquares","doAnimations","length","i","j","rotateTable","row","rowNumbers","filter","num","reverse","findIndex","splice","newRow","JSON","stringify","addItemToTable","animationList","itemSize","tableRef","clientWidth","forEach","rowIndex","colIndex","distCount","realCol","realRow","node","_this3","children","dist","translate","style","transform","transition","push","Promise","resolve","setTimeout","_this4","every","getNumberList","includes","arrayOfEmptyPositions","col","isGameOver","indexInserted","_arrayOfEmptyPosition","pageRef","focus","setStyle","height","split","join","reduce","count","Number","_this5","ref","GamePage_Columns","React","Component","App","window","addEventListener","forceUpdate","components_InstructionsPage","components_SelectSizePage","GamePage_GamePage","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.8d1db61b.chunk.js","sourcesContent":["import React from 'react'\n\nconst InstructionsPage = (props) => (\n  <div id='page'>\n    <h1>Instructions</h1>\n    <div className='container column'>\n      <p>Le but du jeu est de réussir à jumeler les cases pour arriver au final à obtenir une case de 2048 points (ou plus)</p>\n      <p>Seules les cases contenant le même numéro peuvent fusionner</p>\n      <p>Pour y arriver, vous devez utiliser les flèches de votre clavier</p>\n      <span\n        className='button'\n        onClick={() => props.global.setState({ page: 'selectSize' })}\n      >\n      Commencer\n      </span>\n    </div>\n  </div>\n)\n\nexport default InstructionsPage\n","import React from 'react'\n\nconst SelectSizePage = (props) => (\n  <div id='page'>\n    <h1>Select the size of the game</h1>\n    <div className='container inline'>\n      {[...Array(19)].map((v, index) => <SizeItem key={index} {...props} index={index} />)}\n\n    </div>\n  </div>\n)\n\nconst SizeItem = (props) => (\n  <span\n    className='size-item button'\n    onClick={() => props.global.setState({ page: 'game', tableSize: props.index + 2 })}\n  >\n    {`${props.index + 2} x ${props.index + 2}`}\n  </span>\n)\n\nexport default SelectSizePage\n","import React from 'react'\n\nconst Rows = (props) => {\n  return [...Array(props.global.tableSize)].map((v, index) => (\n    <div className='square' key={index}>\n      {!!props.column[index] &&\n      <span className={`point p${props.column[index]}`}>\n        {props.column[index]}\n      </span>\n      }\n    </div>\n  ))\n}\nexport default Rows\n","import React from 'react'\nimport Rows from './Rows'\nconst Columns = (props) => {\n  return [...Array(props.global.tableSize)].map((v, index) => (\n    <div className='row' key={index}>\n      <Rows {...props} column={props.table[index]} />\n    </div>\n  ))\n}\nexport default Columns\n","import React from 'react'\nimport Nav from './Nav'\nimport Popup from './Popup'\nimport Columns from './Columns'\n\nexport default class GamePage extends React.Component {\n  constructor (props) {\n    super(props)\n    this.Nav = Nav.bind(this)\n    this.Popup = Popup.bind(this)\n    this.state = {\n      table: this.setInitialTable()\n    }\n    document.onkeyup = this.arrowKeysHandlers.bind(this)\n  }\n\n  setInitialTable () {\n    const getRandomPosition = () => Math.floor(Math.random() * this.props.global.tableSize)\n    const line = [...Array(this.props.global.tableSize)].map(() => 0)\n    const table = line.slice().map(() => line.slice())\n    // it is possible that the table starts with only one item\n    // if random positions are the same (it is the same in the real game)\n    table[getRandomPosition()][getRandomPosition()] = (Math.floor(Math.random() * 2) + 1) * 2\n    table[getRandomPosition()][getRandomPosition()] = (Math.floor(Math.random() * 2) + 1) * 2\n    return table\n  }\n\n  getMoveParams (key) {\n    return {\n      ArrowLeft: { isReverse: false, isVertical: false },\n      ArrowRight: { isReverse: true, isVertical: false },\n      ArrowUp: { isReverse: false, isVertical: true },\n      ArrowDown: { isReverse: true, isVertical: true }\n    }[key]\n  }\n\n  async arrowKeysHandlers (evt) {\n    const moveParams = this.getMoveParams(evt.key)\n    if (!moveParams) return // if key is not an arrow\n    const { isReverse, isVertical } = moveParams\n    const newTable = this.moveAllSquares(isReverse, isVertical)\n    await this.doAnimations(isReverse, isVertical)\n    this.setState({ table: newTable })\n  }\n\n  // rotate table so that rows change to columns for easier manipulation\n  rotateTable (table) {\n    const length = this.props.global.tableSize\n    const line = [...Array(length)].map(() => 0)\n    const newTable = line.slice().map(() => line.slice())\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length; j++) {\n        newTable[i][j] = table[j][i]\n      }\n    }\n    return newTable\n  }\n\n  // moving in any directions do the same algorythm, if necessary, we just :\n  // initially, reverse the order of rows and/or rotate the table\n  // and finally, again, we reverse the order of rows and/or rotate the table\n  moveAllSquares (isReverse, isVertical) {\n    let table = this.state.table\n    if (isVertical) table = this.rotateTable(table)\n    let newTable = table.map((row) => {\n      let rowNumbers = row.filter((num) => num !== 0)\n      if (isReverse) rowNumbers = rowNumbers.reverse()\n      const index = rowNumbers.findIndex((num, index) => num === rowNumbers[index + 1])\n      if (index > -1) {\n        rowNumbers[index] += rowNumbers[index + 1]\n        rowNumbers.splice(index + 1, 1)\n      }\n      let newRow = row.map((num, index) => rowNumbers[index] || 0)\n      if (isReverse) newRow = newRow.reverse()\n      return newRow\n    })\n    if (isVertical) newTable = this.rotateTable(newTable)\n    // if table has changed add an item\n    if (JSON.stringify(newTable) !== JSON.stringify(this.state.table)) {\n      newTable = this.addItemToTable(newTable)\n    }\n    return newTable\n  }\n\n  async doAnimations (isReverse, isVertical) {\n    const animationList = []\n    const length = this.props.global.tableSize\n    const itemSize = this.tableRef.clientWidth / this.props.global.tableSize\n    const table = isVertical ? this.rotateTable(this.state.table) : this.state.table\n\n    table.forEach((row, rowIndex) => {\n      row = isReverse ? row.reverse() : row\n      for (let colIndex = 0; colIndex < length; colIndex++) {\n        if (row[colIndex]) {\n          let distCount = 0\n          for (let i = colIndex - 1; i >= 0; i--) {\n            if (row[i] !== 0) i = -1\n            else {\n              distCount++\n              row[i] = row[i + 1]\n              row[i + 1] = 0\n            }\n          }\n          if (distCount) {\n            let realCol = isReverse ? length - 1 - colIndex : colIndex\n            const realRow = isVertical ? realCol : rowIndex\n            realCol = isVertical ? rowIndex : realCol\n            const node = this.tableRef.children[realRow].children[realCol].children[0]\n            // if someone plays to fast, chances are that the node is gone before animating it\n            if (node) {\n              const dist = itemSize * distCount\n              const translate = `translate${isVertical ? 'Y' : 'X'}(${isReverse ? '' : '-'}${dist}px)`\n              node.style.transform = translate\n              node.style.transition = '0.3s all ease-in-out'\n              animationList.push(node)\n            }\n          }\n        }\n      }\n    })\n\n    // time to make the animation\n    await new Promise((resolve) => setTimeout(() => resolve(), 300))\n\n    // reset animation\n    animationList.forEach((node) => {\n      node.style.transform = ''\n      node.style.transition = '0s'\n    })\n  }\n\n  // if we can't move in any direction and there is no 0 in the table\n  isGameOver () {\n    const newTableList = [\n      this.moveAllSquares(false, false),\n      this.moveAllSquares(true, false),\n      this.moveAllSquares(false, true),\n      this.moveAllSquares(true, true)\n    ]\n    const isAllSame = newTableList.every((newTable) => (\n      JSON.stringify(this.state.table) === JSON.stringify(newTable)\n    ))\n    return isAllSame && !this.getNumberList().includes(0)\n  }\n\n  // add an item to the table when the move changes the table\n  addItemToTable (table) {\n    const arrayOfEmptyPositions = []\n    table.forEach((row, rowIndex) => {\n      row.forEach((num, colIndex) => {\n        if (num === 0) arrayOfEmptyPositions.push({ row: rowIndex, col: colIndex })\n      })\n    })\n    if (!arrayOfEmptyPositions.length) {\n      this.setState({ isGameOver: true })\n    }\n    const indexInserted = Math.floor(Math.random() * arrayOfEmptyPositions.length)\n    const { row, col } = arrayOfEmptyPositions[indexInserted]\n    table[row][col] = (Math.floor(Math.random() * 2) + 1) * 2\n    return table\n  }\n\n  componentDidMount () {\n    this.pageRef.focus() // handle keyboard event on first load\n    this.setStyle()\n  }\n\n  componentDidUpdate () {\n    this.setStyle()\n  }\n\n  setStyle () {\n    this.tableRef.style.height = this.tableRef.clientWidth + 'px'\n  }\n\n  getNumberList () {\n    let pointTable = JSON.stringify(this.state.table)\n    return pointTable.split('[').join('').split(']').join('').split(',')\n  }\n\n  getScrore () {\n    const numbers = this.getNumberList()\n    return numbers.reduce((count, num) => {\n      count += Number(num)\n      return count\n    }, 0)\n  }\n\n  render () {\n    return (\n      <div id='page' className='game-page' index='0' ref={(ref) => { this.pageRef = ref }}>\n        {this.isGameOver() && <this.Popup title='Vous avez perdu' />}\n        {(this.getNumberList().includes('2048') && !this.state.isContinue) &&\n          <this.Popup title='Vous Avez gagné' isWin />\n        }\n        <h1>2048</h1>\n        <this.Nav {...this} {...this.props} />\n        <h2>Score: <span>{this.getScrore()}</span></h2>\n        <div\n          className='table'\n          style={{ height: this.height }}\n          ref={(ref) => { this.tableRef = ref }}\n        >\n          <Columns {...this.props} {...this.state} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nexport default function Nav (props) {\n  return (\n    <nav>\n      <span onClick={() => this.setState({ table: this.setInitialTable() })}>Recommencer</span>\n      <span onClick={() => this.props.global.setState({ page: 'selectSize' })}>Changer le format</span>\n      <span onClick={() => this.props.global.setState({ page: 'instructions' })}>Instructions</span>\n    </nav>\n  )\n}\n","import React from 'react'\n\nexport default function Popup (props) {\n  return (\n    <div className='popup'>\n      <div className='content'>\n        <h3>{props.title}</h3>\n        <p>{`Vous avez accumulé ${this.getScrore()} points`}</p>\n        {props.isWin && <span onClick={() => this.setState({ isContinue: true })}>Continuer</span>}\n        <span onClick={() => this.props.global.setState({ page: 'selectSize' })}>Changer le format</span>\n        <span onClick={() => this.setState({ table: this.setInitialTable() })}>Recommencer</span>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\n\nimport InstructionsPage from './components/InstructionsPage'\nimport SelectSizePage from './components/SelectSizePage'\nimport GamePage from './components/GamePage/GamePage'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      page: 'instructions',\n      tableSize: null,\n      setState: (state) => this.setState(state)\n    }\n    window.addEventListener('resize', () => this.forceUpdate())\n  }\n  render () {\n    return (\n      <div>\n        { this.state.page === 'instructions' && <InstructionsPage global={this.state} /> }\n        { this.state.page === 'selectSize' && <SelectSizePage global={this.state} /> }\n        { this.state.page === 'game' && <GamePage global={this.state} /> }\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}